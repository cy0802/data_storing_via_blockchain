//.......................................................................................................................
//
//                                                     用來暫存一些資料
//
//.......................................................................................................................


/*
import 'package:mailer/mailer.dart';
import 'package:mailer/smtp_server.dart';
import 'package:data_storing_via_blockchain/api/google_auth_api.dart';
import 'package:data_storing_via_blockchain/server/SendEmail.dart';
import 'package:flutter_email_sender/flutter_email_sender.dart';
import 'package:url_launcher/url_launcher.dart';
//import 'package:url_launcher/link.dart';




//寄EMAIL IN background

/*Future sendEmail() async{
    final message = Message()
      ..from = Address('ian52759@gmail.com', 'ian')
      ..recipients.add('ian52759@gmail.com')
      ..subject = 'hi'
      ..text = 'hey';
  
    final smtpServer = gmail('ian52759@gmail.com', 'Asdf85697437');
    

    try{
      await send(message, smtpServer);
    } on MailerException catch (e){
      print(e);
      return null;
    }*/
    
    
    /*final Email email = Email(
      body: 'hihi',
      subject: 'hi',
      recipients: ['ian52759@gmail.com'],
      attachmentPaths: ['/path/to/attachment'],
      isHTML: false,
    );
    await FlutterEmailSender.send(email);
  }*/ 

  /*Future sendEmail() async{

  final user = await GoogleAuthApi.signIn();

  if(user == null) return;

  final email = user.email;
  final auth = await user.authentication;
  final token = auth.accessToken!;

  print('Authenticated: $email');
  GoogleAuthApi.signOut();

  final smtpServer = gmailSaslXoauth2(email, token);
  final message = Message()
   ..from = Address(email, 'ian')
   ..recipients = ['ian52759@gmail.com']
   ..subject = 'Hello Johannes'
   ..text = 'This is a test email!';

  try{
    await send(message, smtpServer);
    //showSnackBar('Sent email successfully!');
  } on MailerException catch (e){
    print(e);
    return null;
  }
}*/

  /*

void showSnackBar(String text){
  final snackBar = SnackBar(
    content: Text(
      text,
      style: TextStyle(fontSize: 20),
    ),
    backgroundColor: Colors.green,
  );

  ScaffoldMessenger.of(context)
    ..removeCurrentSnackBar()
    ..showSnackBar(snackBar);
}*/



//手動寄EMAIL
/*if(_formKey.currentState!.validate() ){
                      String? encodeQueryParameters(Map<String, String> params) {
                        return params.entries
                            .map((MapEntry<String, String> e) => '${Uri.encodeComponent(e.key)}=${Uri.encodeComponent(e.value)}')
                            .join('&');
                      }

                      final Uri emailLaunchUri = Uri(
                        scheme: 'mailto',
                        path: '$val',
                        query: encodeQueryParameters(<String, String>{
                          'subject': '合約上傳確認信', 
                          'body': '請點選下列網址進行合約確認'
                        }),
                      );
                      launchUrl(emailLaunchUri);
                    }*/


//無用botton
/*
ElevatedButton(
                  child: const Text("validate email"),
                  onPressed: () async {
                    
                    // remember to add some conditions to set valid to true
                          
                    setState(() {
                      valid = true;
                    });
                  },
                )
                */
                IconButton(
            onPressed: ()=> showDialog<String>(
              context: context,
              builder: (BuildContext context) => AlertDialog(
                title: const Text('AlertDialog Title'),
                content: const Text('AlertDialog description'),
                actions: <Widget>[
                  TextButton(
                    onPressed: () => Navigator.pop(context, 'Cancel'),
                    child: const Text('Cancel'),
                  ),
                  TextButton(
                    onPressed: () => Navigator.pop(context, 'OK'),
                    child: const Text('OK'),
                  ),
                ],
              ),
            ),
            icon: Icon(Icons.account_circle_outlined),
          ),

          child: const Text('Logout'),
              onPressed: () {
                final provider =
                    Provider.of<GoogleSignInProvider>(context, listen: false);
                provider.googleLogout();
              },




  void getToken() async{
    await FirebaseMessaging.instance.getToken().then(
      (token) {
        setState((){
          mtoken = token;
          //print("my token is $mtoken");
        });
        saveToken(token!);
      }
    );
  }

  void saveToken(String token) async{
    await FirebaseFirestore.instance.collection("userTokens").doc("User1").set({
      'token' : token,
    });
  }

  void requestPermission() async {
    FirebaseMessaging messaging = FirebaseMessaging.instance;

    NotificationSettings settings = await messaging.requestPermission(
      alert: true,
      announcement: false,
      badge: true,
      carPlay: false,
      criticalAlert: false,
      provisional: false,
      sound: true,
    );

    if(settings.authorizationStatus == AuthorizationStatus.authorized){
      print('User granted permission');
    } else if(settings.authorizationStatus == AuthorizationStatus.provisional){
      print('User granted provisional permission');
    } else {
      print('User declined or has not accepted permission');
    }
  }




 Stream<List<UserPreserve>> readUsers(String email) => FirebaseFirestore.instance
      .collection('user').doc(email).collection('contractPreserve')
      .snapshots()
      .map((snapshot)=>
              snapshot.docs.map((doc) => UserPreserve.fromJson(doc.data())).toList());

Widget buildUser(UserPreserve user) => 
    Card(
      child: ListTile(
        leading: CircleAvatar(
          backgroundColor: Color.fromARGB(255, 209, 208, 208),
        ),
        title: Text(
          user.contractname,
          style: TextStyle(
            fontSize: 20,
          )
        ),
        subtitle: Text(user.name),
        trailing: Icon(Icons.arrow_forward_ios ),
        onTap: ()async{
        }
      )
    );


return ListView.builder(
              shrinkWrap: true,
              itemCount: snapshot.data!.docs.length, 
              itemBuilder: (context, index) {
                String user2Time="";
                var data = snapshot.data!.docs[index].data() as Map<String, dynamic>;
                setState(() async{
                  String anotherEmail1 = data['another_email'];
                  DocumentSnapshot snap =
                  await FirebaseFirestore.instance.collection("user")
                  .doc(anotherEmail1)
                  .collection("contract")
                  .doc(data['contractname'])
                  .get();
                  userorder = data['order'];
                  user1HaveCheck = data['have_checked'];
                  user2Time = snap['time'];
                  user2HaveCheck = snap['have_checked'];
                });

                setState(() async{
                  String anotherEmail1 = data['another_email'];
                  DocumentSnapshot snap =
                  await FirebaseFirestore.instance.collection("user")
                  .doc(anotherEmail1)
                  .collection("contract")
                  .doc(data['contractname'])
                  .get();
                  userorder = data['order'];
                  user1HaveCheck = data['have_checked'];
                  user2Time = snap['time'];
                  user2HaveCheck = snap['have_checked'];
                });

StreamBuilder(
                  stream: getData(data),
                  builder: (context, snapshots){
                      return Card(
                        child: ListTile(
                          leading: CircleAvatar(
                            backgroundColor: Color.fromARGB(255, 209, 208, 208),
                          ),
                          title: Text(
                            data['contractname'],
                            style: TextStyle(
                              fontSize: 20, 
                            )
                          ),
                          subtitle: Text(data['name']),
                          trailing: hi(),
                          onTap: (){
                            print("1");
                            if(data['have_checked'] && user2HaveCheck){
                              if(userorder=="first"){
                                Show_data1(context, data['contractname'], data['name'], data['time'], user2Time);
                              }else{
                                Show_data4(context, data['contractname'], data['name'], data['time']);
                              }
                              
                            } else if (data['have_checked']){
                              Show_data2(context, data['contractname'], data['name'], data['time']);
                            } else {
                              Show_data3(context, data['contractname'], data['name'], data['time']);
                            }
                          }
                        )
                      );
                  }
                );
                Stream<Map<String, dynamic>> getData(Map<String, dynamic> data) async* {
    DocumentSnapshot snap =
    await FirebaseFirestore.instance.collection("user")
                  .doc(data['another_email'])
                  .collection("contract")
                  .doc(data['contractname'])
                  .get();
    userorder = data['order'];
    user1HaveCheck = data['have_checked'];
    user2Time = snap['time'];
    user2HaveCheck = snap['have_checked'];
  }