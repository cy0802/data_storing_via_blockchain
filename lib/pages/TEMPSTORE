/*
import 'package:mailer/mailer.dart';
import 'package:mailer/smtp_server.dart';
import 'package:data_storing_via_blockchain/api/google_auth_api.dart';
import 'package:data_storing_via_blockchain/server/SendEmail.dart';
import 'package:flutter_email_sender/flutter_email_sender.dart';
import 'package:url_launcher/url_launcher.dart';
//import 'package:url_launcher/link.dart';




//寄EMAIL IN background

/*Future sendEmail() async{
    final message = Message()
      ..from = Address('ian52759@gmail.com', 'ian')
      ..recipients.add('ian52759@gmail.com')
      ..subject = 'hi'
      ..text = 'hey';
  
    final smtpServer = gmail('ian52759@gmail.com', 'Asdf85697437');
    

    try{
      await send(message, smtpServer);
    } on MailerException catch (e){
      print(e);
      return null;
    }*/
    
    
    /*final Email email = Email(
      body: 'hihi',
      subject: 'hi',
      recipients: ['ian52759@gmail.com'],
      attachmentPaths: ['/path/to/attachment'],
      isHTML: false,
    );
    await FlutterEmailSender.send(email);
  }*/ 

  /*Future sendEmail() async{

  final user = await GoogleAuthApi.signIn();

  if(user == null) return;

  final email = user.email;
  final auth = await user.authentication;
  final token = auth.accessToken!;

  print('Authenticated: $email');
  GoogleAuthApi.signOut();

  final smtpServer = gmailSaslXoauth2(email, token);
  final message = Message()
   ..from = Address(email, 'ian')
   ..recipients = ['ian52759@gmail.com']
   ..subject = 'Hello Johannes'
   ..text = 'This is a test email!';

  try{
    await send(message, smtpServer);
    //showSnackBar('Sent email successfully!');
  } on MailerException catch (e){
    print(e);
    return null;
  }
}*/

  /*

void showSnackBar(String text){
  final snackBar = SnackBar(
    content: Text(
      text,
      style: TextStyle(fontSize: 20),
    ),
    backgroundColor: Colors.green,
  );

  ScaffoldMessenger.of(context)
    ..removeCurrentSnackBar()
    ..showSnackBar(snackBar);
}*/



//手動寄EMAIL
/*if(_formKey.currentState!.validate() ){
                      String? encodeQueryParameters(Map<String, String> params) {
                        return params.entries
                            .map((MapEntry<String, String> e) => '${Uri.encodeComponent(e.key)}=${Uri.encodeComponent(e.value)}')
                            .join('&');
                      }

                      final Uri emailLaunchUri = Uri(
                        scheme: 'mailto',
                        path: '$val',
                        query: encodeQueryParameters(<String, String>{
                          'subject': '合約上傳確認信', 
                          'body': '請點選下列網址進行合約確認'
                        }),
                      );
                      launchUrl(emailLaunchUri);
                    }*/


//無用botton
/*
ElevatedButton(
                  child: const Text("validate email"),
                  onPressed: () async {
                    
                    // remember to add some conditions to set valid to true
                          
                    setState(() {
                      valid = true;
                    });
                  },
                )
                */